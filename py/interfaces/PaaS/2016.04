#!/usr/bin/env python3
# (c) 2015, 2016 Charles Childers

# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


import base64, cgi, cgitb, bz2, json, signal, sys
import io
import parable


# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


def extract(pso, key):
    raw = base64.b64decode(pso)
    j = json.loads(bz2.decompress(raw).decode())
    return j[key]


def save_snapshot():
    j = json.dumps({"symbols": parable.dictionary,
                    "stack_values": parable.stack,
                    "errors": parable.errors,
                    "memory_contents": parable.memory_values,
                    "memory_types": parable.memory_types,
                    "memory_map": parable.memory_map,
                    "memory_sizes": parable.memory_size})
    o = bz2.compress(bytes(j, 'utf-8'))
    return base64.b64encode(o)


def load_snapshot(data):
    raw = base64.b64decode(data)
    j = json.loads(bz2.decompress(raw).decode())
    parable.dictionary = j['symbols']
    parable.stack = j['stack_values']
    parable.memory_values = j['memory_contents']
    parable.memory_types = j['memory_types']
    parable.memory_map = j['memory_map']
    parable.memory_size = j['memory_sizes']
    parable.errors = j['errors']


# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


def obtain(form):
    pso = open('snapshots/2016.04', 'r').read()
    return pso


def evaluate(form):
    pso = form.getvalue("snapshot", obtain(form))
    load_snapshot(pso)
    parable.clear_errors()
    source = form.getvalue("source")
    process_input(source)
    pso = save_snapshot().decode()
    return pso


def dictionary(form):
    pso = form.getvalue("snapshot")
    load_snapshot(pso)
    j = json.dumps({"names": parable.dictionary_names(),
                    "pointers": parable.dictionary_slices(),
                  })
    return j


def stack(form):
    pso = form.getvalue("snapshot")
    load_snapshot(pso)
    j = json.dumps({"values": parable.stack_values(),
                    "types": parable.stack_types(),
                    "parsed": parable.parsed_stack(),
                  })
    return j


def slice(form):
    pso = form.getvalue("snapshot")
    load_snapshot(pso)
    s = int(form.getvalue("which"))
    memory = extract(pso, 'memory_contents')
    return memory[s]


def errors(form):
    pso = form.getvalue("snapshot")
    load_snapshot(pso)
    return extract(pso, 'errors')


# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


def handler(signum, frame):
    print("Content-Type: application/json")
    print("")
    report('FATAL ERROR: Execution exceed max runtime permitted')
    sys.exit('fatal error: execution runtime exceeded')


def process_input(source):
    filtered = source.replace("\\\r\n", " ")
    filtered = filtered.replace("\\\n", " ")
    lines = filtered.split("\n")

    for line in lines:
        line = line.strip()
        if len(line) >= 1 and line != '':
            slice = parable.compile(line, parable.request_slice())
            parable.interpret(slice)


# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


if __name__ == '__main__':
    # Cap max run time at 60 seconds
    # (This seems satisfactory so far, and keeps server load managable)
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(60)

    # get input (in "code" field)
    form = cgi.FieldStorage()

    req = form.getvalue("req")
    res = ""

    if req == "obtain":
        print("Content-Type: text/plain")
        res = obtain(form)

    if req == "evaluate":
        print("Content-Type: text/plain")
        res = evaluate(form)

    if req == "dictionary":
        print("Content-Type: text/json")
        res = dictionary(form)

    if req == "stack":
        print("Content-Type: text/json")
        res = stack(form)

    if req == "errors":
        print("Content-Type: text/json")
        res = errors(form)

    if req == "slice":
        print("Content-Type: text/json")
        res = slice(form)

    print("")
    print(res)

# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
