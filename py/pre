#!/usr/bin/env python
# Copyright (c)2012-2016, Charles Childers
# parable
# Copyright (c) 2012-2016, Charles Childers
# -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# coding: utf-8

#
# Dependencies
#
import math
import random
import sys

#
# Memory Configuration
#

MAX_SLICES = 100000

#
# Constants for data types
#

TYPE_NUMBER = 100
TYPE_STRING = 200
TYPE_CHARACTER = 300
TYPE_POINTER = 400
TYPE_FLAG = 500
TYPE_BYTECODE = 600
TYPE_REMARK = 700
TYPE_FUNCTION_CALL = 800

#
# Constants for byte codes
# These are loosely grouped by type
#

BC_SET_TYPE = 100
BC_GET_TYPE = 101
BC_ADD = 200
BC_SUBTRACT = 201
BC_MULTIPLY = 202
BC_DIVIDE = 203
BC_REMAINDER = 204
BC_FLOOR = 205
BC_POW = 206
BC_LOG = 207
BC_LOG10 = 208
BC_LOGN = 209
BC_BITWISE_SHIFT = 210
BC_BITWISE_AND = 211
BC_BITWISE_OR = 212
BC_BITWISE_XOR = 213
BC_RANDOM = 214
BC_SQRT = 215
BC_ROUND = 216
BC_COMPARE_LT = 220
BC_COMPARE_GT = 221
BC_COMPARE_LTEQ = 222
BC_COMPARE_GTEQ = 223
BC_COMPARE_EQ = 224
BC_COMPARE_NEQ = 225
BC_FLOW_IF = 300
BC_FLOW_WHILE = 301
BC_FLOW_UNTIL = 302
BC_FLOW_TIMES = 303
BC_FLOW_CALL = 304
BC_FLOW_CALL_F = 305
BC_FLOW_DIP = 306
BC_FLOW_SIP = 307
BC_FLOW_BI = 308
BC_FLOW_TRI = 309
BC_FLOW_ABORT = 398
BC_FLOW_RETURN = 399
BC_MEM_COPY = 400
BC_MEM_FETCH = 401
BC_MEM_STORE = 402
BC_MEM_REQUEST = 403
BC_MEM_RELEASE = 404
BC_MEM_COLLECT = 405
BC_MEM_GET_LAST = 406
BC_MEM_SET_LAST = 407
BC_MEM_SET_TYPE = 408
BC_MEM_GET_TYPE = 409
BC_STACK_DUP = 500
BC_STACK_DROP = 501
BC_STACK_SWAP = 502
BC_STACK_DEPTH = 503
BC_QUOTE_NAME = 600
BC_FUNCTION_EXISTS = 601
BC_FUNCTION_LOOKUP = 602
BC_FUNCTION_HIDE = 603
BC_FUNCTION_NAME = 604
BC_STRING_SEEK = 700
BC_SLICE_SUBSLICE = 701
BC_STRING_NUMERIC = 702
BC_SLICE_REVERSE = 703
BC_TO_LOWER = 800
BC_TO_UPPER = 801
BC_REPORT = 900
BC_TRIG_SIN = 1000
BC_TRIG_COS = 1001
BC_TRIG_TAN = 1002
BC_TRIG_ASIN = 1003
BC_TRIG_ACOS = 1004
BC_TRIG_ATAN = 1005
BC_TRIG_ATAN2 = 1006


#
# Support code
#

def is_number(s):
    """return True if s is a number, or False otherwise"""
    try:
        float(s)
        return True
    except ValueError:
        return False


def condense_lines(code):
    """Take an array of code, join lines ending with a \, and return"""
    """the new array"""
    m = len(code)
    s = ''
    r = []
    i = 0
    c = 0
    while i < m:
        if code[i].endswith(' \\\n'):
            s = s + ' ' + code[i][:-2].strip()
            c = 1
        else:
            c = 0
            s = s + ' ' + code[i]
        if c == 0:
            if s != '' and s != ' \n':
                r.append(s.strip())
            s = ''
        i = i + 1
    return r


#
# logging of errors
#
# errors are stored in an array, with helper functions to
# record and clear them
#

errors = []


def clear_errors():
    """remove all errors from the error log"""
    global errors
    errors = []


def report(text):
    """report an error"""
    global errors
    errors.append(text)


def check_depth(slice, offset, cells):
    """returns True if the stack has at least *cells* number of items, or"""
    """False otherwise. If False, reports an underflow error."""
    global stack
    if len(stack) < cells:
        details = 'Slice ' + str(slice) + ' Offset: ' + str(offset)
        expected = str(cells) + ' values required'
        report('E01: Stack underflow: ' + details + ': ' + expected)
        return False
    else:
        return True


#
# Byte code interpreter
#

current_slice = 0
should_abort = False


def interpret(slice, more=None):
    """Interpret the byte codes contained in a slice."""
    global current_slice
    global should_abort
    offset = 0
    size = get_last_index(int(slice))
    if current_slice == 0:
        current_slice = slice
    while offset <= size and should_abort is not True:
        opcode = fetch(slice, offset)
        optype = fetch_type(slice, offset)

        if optype != TYPE_BYTECODE:
            stack_push(opcode, optype)
            if optype == TYPE_REMARK:
                stack_pop()
            if optype == TYPE_FUNCTION_CALL:
                interpret(stack_pop(), more)
        else:
            if opcode == BC_SET_TYPE:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    stack_change_type(a)
                else:
                    offset = size
            elif opcode == BC_GET_TYPE:
                if check_depth(slice, offset, 1):
                    stack_push(stack_type(), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_ADD:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == TYPE_STRING and y == TYPE_STRING:
                        a = slice_to_string(a)
                        b = slice_to_string(b)
                        stack_push(string_to_slice(b + a), TYPE_STRING)
                    elif x == TYPE_REMARK and y == TYPE_REMARK:
                        a = slice_to_string(a)
                        b = slice_to_string(b)
                        stack_push(string_to_slice(b + a), TYPE_REMARK)
                    elif x == TYPE_POINTER and y == TYPE_POINTER:
                        c = request_slice()
                        d = get_last_index(b) + get_last_index(a) + 1
                        set_slice_last_index(c, d)
                        memory_values[c] = memory_values[b] + memory_values[a]
                        memory_types[c] = memory_types[b] + memory_types[a]
                        stack_push(c, TYPE_POINTER)
                    else:
                        stack_push(a + b, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_SUBTRACT:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(b - a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_MULTIPLY:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(a * b, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_DIVIDE:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    if a == 0 or b == 0:
                        stack_push(float('nan'), TYPE_NUMBER)
                        report('E04: Divide by Zero')
                    else:
                        stack_push(b / a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_REMAINDER:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(b % a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_FLOOR:
                if check_depth(slice, offset, 1):
                    stack_push(math.floor(float(stack_pop())), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_POW:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(math.pow(b, a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_LOG:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.log(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_LOG10:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.log10(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_LOGN:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(math.log(b, a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_BITWISE_SHIFT:
                if check_depth(slice, offset, 2):
                    a = int(stack_pop())
                    b = int(stack_pop())
                    if a < 0:
                        stack_push(b << abs(a), TYPE_NUMBER)
                    else:
                        stack_push(b >> a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_BITWISE_AND:
                if check_depth(slice, offset, 2):
                    a = int(stack_pop())
                    b = int(stack_pop())
                    stack_push(b & a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_BITWISE_OR:
                if check_depth(slice, offset, 2):
                    a = int(stack_pop())
                    b = int(stack_pop())
                    stack_push(b | a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_BITWISE_XOR:
                if check_depth(slice, offset, 2):
                    a = int(stack_pop())
                    b = int(stack_pop())
                    stack_push(b ^ a, TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_RANDOM:
                stack_push(random.SystemRandom().random(), TYPE_NUMBER)
            elif opcode == BC_SQRT:
                if check_depth(slice, offset, 1):
                    stack_push(math.sqrt(stack_pop()), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_ROUND:
                if check_depth(slice, offset, 1):
                    stack_push(round(stack_pop()), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_COMPARE_LT:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == TYPE_NUMBER and y == TYPE_NUMBER:
                        if b < a:
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    else:
                        offset = size
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_COMPARE_GT:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == TYPE_NUMBER and y == TYPE_NUMBER:
                        if b > a:
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    else:
                        offset = size
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_COMPARE_LTEQ:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == TYPE_NUMBER and y == TYPE_NUMBER:
                        if b <= a:
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    else:
                        offset = size
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_COMPARE_GTEQ:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == TYPE_NUMBER and y == TYPE_NUMBER:
                        if b >= a:
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    else:
                        offset = size
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_COMPARE_EQ:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == y and x != TYPE_STRING:
                        if b == a:
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    elif x == y and x == TYPE_STRING:
                        if slice_to_string(b) == slice_to_string(a):
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    else:
                        offset = size
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_COMPARE_NEQ:
                if check_depth(slice, offset, 2):
                    x = stack_type()
                    a = stack_pop()
                    y = stack_type()
                    b = stack_pop()
                    if x == y and x != TYPE_STRING:
                        if b != a:
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    elif x == y and x == TYPE_STRING:
                        if slice_to_string(b) != slice_to_string(a):
                            stack_push(-1, TYPE_FLAG)
                        else:
                            stack_push(0, TYPE_FLAG)
                    else:
                        offset = size
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_FLOW_IF:
                if check_depth(slice, offset, 3):
                    a = stack_pop()  # false
                    b = stack_pop()  # true
                    c = stack_pop()  # flag
                    if c == -1:
                        interpret(b, more)
                    else:
                        interpret(a, more)
                else:
                    offset = size
            elif opcode == BC_FLOW_WHILE:
                if check_depth(slice, offset, 1):
                    quote = stack_pop()
                    a = -1
                    while a == -1:
                        interpret(quote, more)
                        a = stack_pop()
                else:
                    offset = size
            elif opcode == BC_FLOW_UNTIL:
                if check_depth(slice, offset, 1):
                    quote = stack_pop()
                    a = 0
                    while a == 0:
                        interpret(quote, more)
                        a = stack_pop()
                else:
                    offset = size
            elif opcode == BC_FLOW_TIMES:
                if check_depth(slice, offset, 2):
                    quote = stack_pop()
                    count = stack_pop()
                    while count > 0:
                        interpret(quote, more)
                        count -= 1
                else:
                    offset = size
            elif opcode == BC_FLOW_CALL:
                offset += 1
                interpret(int(fetch(slice, offset)), more)
            elif opcode == BC_FLOW_CALL_F:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    interpret(a, more)
                else:
                    offset = size
            elif opcode == BC_FLOW_DIP:
                if check_depth(slice, offset, 2):
                    quote = stack_pop()
                    vtype = stack_type()
                    value = stack_pop()
                    interpret(quote, more)
                    stack_push(value, vtype)
                else:
                    offset = size
            elif opcode == BC_FLOW_SIP:
                if check_depth(slice, offset, 2):
                    quote = stack_pop()
                    stack_dup()
                    vtype = stack_type()
                    value = stack_pop()
                    interpret(quote, more)
                    stack_push(value, vtype)
                else:
                    offset = size
            elif opcode == BC_FLOW_BI:
                if check_depth(slice, offset, 3):
                    a = stack_pop()
                    b = stack_pop()
                    stack_dup()
                    x = stack_type()
                    y = stack_pop()
                    interpret(b, more)
                    stack_push(y, x)
                    interpret(a, more)
                else:
                    offset = size
            elif opcode == BC_FLOW_TRI:
                if check_depth(slice, offset, 4):
                    a = stack_pop()
                    b = stack_pop()
                    c = stack_pop()
                    stack_dup()
                    x = stack_type()
                    y = stack_pop()
                    stack_dup()
                    m = stack_type()
                    q = stack_pop()
                    interpret(c, more)
                    stack_push(q, m)
                    interpret(b, more)
                    stack_push(y, x)
                    interpret(a, more)
                else:
                    offset = size
            elif opcode == BC_FLOW_ABORT:
                should_abort = True
            elif opcode == BC_FLOW_RETURN:
                offset = size
            elif opcode == BC_MEM_COPY:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    copy_slice(b, a)
                else:
                    offset = size
            elif opcode == BC_MEM_FETCH:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(fetch(b, a), fetch_type(b, a))
                else:
                    offset = size
            elif opcode == BC_MEM_STORE:
                if check_depth(slice, offset, 3):
                    a = stack_pop()   # offset
                    b = stack_pop()   # slice
                    t = stack_type()  # type
                    c = stack_pop()   # value
                    store(c, b, a, t)
                else:
                    offset = size
            elif opcode == BC_MEM_REQUEST:
                stack_push(request_slice(), TYPE_POINTER)
            elif opcode == BC_MEM_RELEASE:
                if check_depth(slice, offset, 1):
                    release_slice(stack_pop())
                else:
                    offset = size
            elif opcode == BC_MEM_COLLECT:
                collect_garbage()
            elif opcode == BC_MEM_GET_LAST:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(get_last_index(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_MEM_SET_LAST:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    set_slice_last_index(a, b)
                else:
                    offset = size
            elif opcode == BC_MEM_SET_TYPE:
                if check_depth(slice, offset, 3):
                    a = stack_pop()  # offset
                    b = stack_pop()  # slice
                    c = stack_pop()  # type
                    store_type(b, a, c)
                else:
                    offset = size
            elif opcode == BC_MEM_GET_TYPE:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    b = stack_pop()
                    c = fetch_type(b, a)
                    stack_push(int(c), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_STACK_DUP:
                if check_depth(slice, offset, 1):
                    stack_dup()
                else:
                    offset = size
            elif opcode == BC_STACK_DROP:
                if check_depth(slice, offset, 1):
                    stack_drop()
                else:
                    offset = size
            elif opcode == BC_STACK_SWAP:
                if check_depth(slice, offset, 2):
                    stack_swap()
                else:
                    offset = size
            elif opcode == BC_STACK_DEPTH:
                stack_push(len(stack), TYPE_NUMBER)
            elif opcode == BC_QUOTE_NAME:
                if check_depth(slice, offset, 2):
                    name = slice_to_string(stack_pop())
                    ptr = stack_pop()
                    add_definition(name, ptr)
                else:
                    offset = size
            elif opcode == BC_FUNCTION_EXISTS:
                if check_depth(slice, offset, 1):
                    name = slice_to_string(stack_pop())
                    if lookup_pointer(name) != -1:
                        stack_push(-1, TYPE_FLAG)
                    else:
                        stack_push(0, TYPE_FLAG)
                else:
                    offset = size
            elif opcode == BC_FUNCTION_LOOKUP:
                if check_depth(slice, offset, 1):
                    name = slice_to_string(stack_pop())
                    if lookup_pointer(name) != -1:
                        stack_push(lookup_pointer(name), TYPE_POINTER)
                    else:
                        stack_push(-1, TYPE_POINTER)
                else:
                    offset = size
            elif opcode == BC_FUNCTION_HIDE:
                if check_depth(slice, offset, 1):
                    name = slice_to_string(stack_pop())
                    if lookup_pointer(name) != -1:
                        remove_name(name)
                else:
                    offset = size
            elif opcode == BC_FUNCTION_NAME:
                if check_depth(slice, offset, 1):
                    a = pointer_to_name(stack_pop())
                    stack_push(string_to_slice(a), TYPE_STRING)
                else:
                    offset = size
            elif opcode == BC_STRING_SEEK:
                if check_depth(slice, offset, 2):
                    a = slice_to_string(stack_pop())
                    b = slice_to_string(stack_pop())
                    stack_push(b.find(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_SLICE_SUBSLICE:
                if check_depth(slice, offset, 3):
                    a = int(stack_pop())
                    b = int(stack_pop())
                    s = int(stack_pop())
                    c = memory_values[s]
                    d = c[b:a]
                    dt = memory_types[s]
                    dt = dt[b:a]
                    e = request_slice()
                    i = 0
                    while i < len(d):
                        store(d[i], e, i, dt[i])
                        i = i + 1
                    stack_push(e, TYPE_POINTER)
                else:
                    offset = size
            elif opcode == BC_STRING_NUMERIC:
                if check_depth(slice, offset, 1):
                    a = slice_to_string(stack_pop())
                    if is_number(a):
                        stack_push(-1, TYPE_FLAG)
                    else:
                        stack_push(0, TYPE_FLAG)
                else:
                    offset = size
            elif opcode == BC_SLICE_REVERSE:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    memory_values[int(a)] = memory_values[int(a)][::-1]
                    stack_push(a, TYPE_POINTER)
                else:
                    offset = size
            elif opcode == BC_TO_UPPER:
                if check_depth(slice, offset, 1):
                    t = stack_type()
                    if t == TYPE_STRING:
                        ptr = stack_pop()
                        a = slice_to_string(ptr).upper()
                        stack_push(string_to_slice(a), TYPE_STRING)
                    elif t == TYPE_CHARACTER:
                        a = stack_pop()
                        b = ''.join(chr(a))
                        a = b.upper()
                        stack_push(ord(a[0].encode('utf-8')), TYPE_CHARACTER)
                    else:
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_TO_LOWER:
                if check_depth(slice, offset, 1):
                    t = stack_type()
                    if t == TYPE_STRING:
                        ptr = stack_pop()
                        a = slice_to_string(ptr).lower()
                        stack_push(string_to_slice(a), TYPE_STRING)
                    elif t == TYPE_CHARACTER:
                        a = stack_pop()
                        b = ''.join(chr(a))
                        a = b.lower()
                        stack_push(ord(a[0].encode('utf-8')), TYPE_CHARACTER)
                    else:
                        details = 'Slice ' + str(slice)
                        details = details + ' Offset: ' + str(offset)
                        report('E02: Type mismatch: ' + details)
                else:
                    offset = size
            elif opcode == BC_REPORT:
                if check_depth(slice, offset, 1):
                    if stack_type() == TYPE_STRING:
                        a = slice_to_string(stack_pop())
                        report(a)
                offset = size
            elif opcode == BC_TRIG_SIN:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.sin(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_TRIG_COS:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.cos(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_TRIG_TAN:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.tan(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_TRIG_ASIN:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.asin(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_TRIG_ACOS:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.acos(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_TRIG_ATAN:
                if check_depth(slice, offset, 1):
                    a = stack_pop()
                    stack_push(math.atan(a), TYPE_NUMBER)
                else:
                    offset = size
            elif opcode == BC_TRIG_ATAN2:
                if check_depth(slice, offset, 2):
                    a = stack_pop()
                    b = stack_pop()
                    stack_push(math.atan2(b, a), TYPE_NUMBER)
                else:
                    offset = size
            if more is not None:
                offset = more(slice, offset, opcode)

        offset += 1
    current_slice = 0


#
# Data stack implementation
#

stack = []
types = []


def stack_clear():
    """remove all values from the stack"""
    global stack, types
    i = 0
    while i < len(stack):
        stack.pop()
        types.pop()


def stack_push(value, type):
    """push a value to the stack"""
    global stack, types
    stack.append(value)
    types.append(type)


def stack_drop():
    """remove a value from the stack"""
    global stack, types
    stack.pop()
    types.pop()


def stack_pop():
    """remove and return a value from the stack"""
    global stack, types
    types.pop()
    return stack.pop()


def tos():
    """return a pointer to the top element in the stack"""
    global stack, types
    return len(stack) - 1


def stack_type():
    """return the type identifier for the top item on the stack"""
    global stack, types
    return types[tos()]


def stack_swap():
    """switch the positions of the top items on the stack"""
    at = stack_type()
    av = stack_pop()
    bt = stack_type()
    bv = stack_pop()
    stack_push(av, at)
    stack_push(bv, bt)


def stack_dup():
    """duplicate the top item on the stack"""
    """if the value is a string, makes a copy of it"""
    at = stack_type()
    av = stack_pop()
    stack_push(av, at)
    if at == TYPE_STRING:
        s = request_slice()
        copy_slice(av, s)
        stack_push(s, at)
    else:
        stack_push(av, at)


def stack_change_type(desired):
    """convert the type of an item on the stack to a different type"""
    global types, stack
    original = stack_type()
    if desired == TYPE_BYTECODE:
        if original == TYPE_NUMBER:
            types.pop()
            types.append(TYPE_BYTECODE)
    elif desired == TYPE_NUMBER:
        if original == TYPE_STRING:
            if is_number(slice_to_string(stack[tos()])):
                stack_push(float(slice_to_string(stack_pop())), TYPE_NUMBER)
            else:
                stack_pop()
                stack_push(float('nan'), TYPE_NUMBER)
        else:
            types.pop()
            types.append(TYPE_NUMBER)
    elif desired == TYPE_STRING:
        if original == TYPE_NUMBER:
            stack_push(string_to_slice(str(stack_pop())), TYPE_STRING)
        elif original == TYPE_CHARACTER:
            stack_push(string_to_slice(str(chr(stack_pop()))), TYPE_STRING)
        elif original == TYPE_FLAG:
            s = stack_pop()
            if s == -1:
                stack_push(string_to_slice('true'), TYPE_STRING)
            elif s == 0:
                stack_push(string_to_slice('false'), TYPE_STRING)
            else:
                stack_push(string_to_slice('malformed flag'), TYPE_STRING)
        elif original == TYPE_POINTER or original == TYPE_REMARK:
            types.pop()
            types.append(TYPE_STRING)
        else:
            return 0
    elif desired == TYPE_CHARACTER:
        if original == TYPE_STRING:
            s = slice_to_string(stack_pop())
            stack_push(ord(s[0].encode('utf-8')), TYPE_CHARACTER)
        else:
            s = stack_pop()
            stack_push(int(s), TYPE_CHARACTER)
    elif desired == TYPE_POINTER:
        types.pop()
        types.append(TYPE_POINTER)
    elif desired == TYPE_FLAG:
        if original == TYPE_STRING:
            s = slice_to_string(stack_pop())
            if s == 'true':
                stack_push(-1, TYPE_FLAG)
            elif s == 'false':
                stack_push(0, TYPE_FLAG)
            else:
                stack_push(1, TYPE_FLAG)
        else:
            s = stack_pop()
            stack_push(s, TYPE_FLAG)
    elif desired == TYPE_FUNCTION_CALL:
        if original == TYPE_NUMBER or original == TYPE_POINTER:
            a = stack_pop()
            stack_push(a, TYPE_FUNCTION_CALL)
    else:
        a = stack_pop()
        stack_push(a, desired)


#
# Parable's dictionary consists of two related arrays.
# The first contains the names. The second contains pointers
# to the slices for each named item.
#

dictionary_names = []
dictionary_slices = []
dictionary_hidden_slices = []

def in_dictionary(s):
    global dictionary_names, dictionary_slices
    return s in dictionary_names


def lookup_pointer(name):
    global dictionary_names, dictionary_slices
    if in_dictionary(name) is False:
        return -1
    else:
        return dictionary_slices[dictionary_names.index(name)]


def add_definition(name, slice):
    global dictionary_names, dictionary_slices
    if in_dictionary(name) is False:
        dictionary_names.append(name)
        dictionary_slices.append(slice)
    else:
        target = dictionary_slices[dictionary_names.index(name)]
        copy_slice(slice, target)
    return dictionary_names.index(name)


def remove_name(name):
    global dictionary_names, dictionary_slices, dictionary_hidden_slices
    if in_dictionary(name) is not False:
        i = dictionary_names.index(name)
        del dictionary_names[i]
        dictionary_hidden_slices.append(dictionary_slices[i])
        del dictionary_slices[i]


#
# in parable, memory is divided into regions called slices
# compiled code, strings, and other data are stored in these.
#

memory_values = []
memory_types = []
memory_map = []
memory_size = []


def request_slice(attempts=1):
    """request a new memory slice"""
    global memory_values, memory_types, memory_map, memory_size, MAX_SLICES
    i = 0
    while i < MAX_SLICES:
        if memory_map[i] == 0:
            memory_map[i] = 1
            memory_values[i] = [0]
            memory_types[i] = [TYPE_NUMBER]
            memory_size[i] = 0
            return i
        else:
            i += 1
    if attempts == 1:
        collect_garbage()
        return request_slice(2)
    else:
        return -1


def release_slice(slice):
    """release a slice. the slice should not be used after this is done"""
    global memory_map
    memory_map[int(slice)] = 0


def copy_slice(source, dest):
    """copy the contents of one slice to another"""
    global memory_values, memory_map, memory_size
    i = 0
    l = memory_size[int(source)]
    while i <= l:
        v = fetch(int(source), i)
        t = fetch_type(int(source), i)
        store(v, int(dest), i, t)
        i += 1
    memory_size[int(dest)] = memory_size[int(source)]


def prepare_slices():
    """prepare the initial set of slices for use"""
    global memory_values, memory_types, memory_map, memory_size, MAX_SLICES
    memory_map = [0 for x in range(MAX_SLICES)]
    memory_values = [0 for x in range(MAX_SLICES)]
    memory_types = [0 for x in range(MAX_SLICES)]
    memory_size = [0 for x in range(MAX_SLICES)]


def fetch(slice, offset):
    """obtain a value stored in a slice"""
    global memory_values, memory_map
    if get_last_index(slice) < offset:
        set_slice_last_index(slice, offset)
    return memory_values[int(slice)][int(offset)]


def fetch_type(slice, offset):
    """obtain a value stored in a slice"""
    global memory_types, memory_map
    if get_last_index(slice) < offset:
        set_slice_last_index(slice, offset)
    return memory_types[int(slice)][int(offset)]


def store_type(slice, offset, type):
    global memory_values, memory_types, memory_map
    if get_last_index(slice) < offset:
        set_slice_last_index(slice, offset)
    memory_types[int(slice)][int(offset)] = type


def store(value, slice, offset, type=100):
    """store a value into a slice"""
    global memory_values, memory_types, memory_map
    if get_last_index(slice) < offset:
        set_slice_last_index(slice, offset)
    memory_values[int(slice)][int(offset)] = value
    memory_types[int(slice)][int(offset)] = type


def get_last_index(slice):
    """get the length of a slice"""
    global memory_size
    return memory_size[int(slice)]


def set_slice_last_index(slice, size):
    """set the length of a slice"""
    global memory_values, memory_types, memory_size
    old_size = memory_size[int(slice)]
    grow_by = size - old_size
    if grow_by > 0:
        memory_values[int(slice)].extend(list(range(int(grow_by))))
        memory_types[int(slice)].extend(list(range(int(grow_by))))
    if grow_by < 0:
        while grow_by < 0:
            grow_by = grow_by + 1
            del memory_values[int(slice)][-1]
            del memory_types[int(slice)][-1]
    memory_size[int(slice)] = size


def string_to_slice(string):
    """convert a string into a slice"""
    s = request_slice()
    if string != '':
        i = 0
        for char in list(string):
            store(ord(char.encode('utf-8')), s, i, TYPE_CHARACTER)
            i += 1
    else:
        set_slice_last_index(s, -1)
    return s


def slice_to_string(slice):
    """convert a slice into a string"""
    s = []
    i = 0
    size = get_last_index(int(slice))
    while i <= size:
        s.append(chr(int(fetch(slice, i))))
        i += 1
    return ''.join(s)


#
# unused slices can be reclaimed either manually using release_slice(),
# or parable can attempt to identify them and reclaim them automatically.
# the code here implements the garbage collector.
#

def is_pointer(type):
    flag = False
    if type == TYPE_POINTER or \
       type == TYPE_STRING or \
       type == TYPE_REMARK or \
       type == TYPE_FUNCTION_CALL:
        flag = True
    else:
        flag = False
    return flag


def find_references(s):
    """given a slice, return a list of all references in it"""
    ptrs = []
    i = 0
    if s < 0:
        return []
    if get_last_index(s) <= 0:
        type = fetch_type(s, 0)
        if is_pointer(type):
            if not fetch(s, 0) in ptrs:
                ptrs.append(int(fetch(s, 0)))
        if type == TYPE_POINTER or type == TYPE_FUNCTION_CALL:
            for xt in find_references(int(fetch(s, 0))):
                if not fetch(s, 0) in ptrs:
                    ptrs.append(int(xt))
    else:
        while i < get_last_index(s):
            type = fetch_type(s, i)
            if is_pointer(type):
                if not fetch(s, i) in ptrs:
                    ptrs.append(int(fetch(s, i)))
            if type == TYPE_POINTER or type == TYPE_FUNCTION_CALL:
                for xt in find_references(int(fetch(s, i))):
                    if not xt in ptrs:
                        ptrs.append(int(xt))
            i += 1
    return list(set(ptrs))


def seek_all_references():
    """return a list of all references in all named slices and stack items"""
    global dictionary_slices, stack, types, current_slice
    sources = []

    # Named items
    for s in dictionary_slices:
        if not s in sources:
            sources.append(s)

    # Previously named but now hidden items
    for s in dictionary_hidden_slices:
        if not s in sources:
            sources.append(s)

    # The current slice
    if not current_slice in sources:
        sources.append(current_slice)

    # Strings, comments, pointers, function calls on the stack
    i = tos()
    while i >= 0:
        if is_pointer(types[i]):
            sources.append(stack[i])
        i = i - 1

    refs = sources
    for s in sources:
        for x in find_references(s):
            if not x in refs:
                refs.append(x)

    return refs


def collect_garbage():
    """scan memory, and collect unused slices"""
    global MAX_SLICES, memory_map
    i = 0
    refs = seek_all_references()
    while i < MAX_SLICES:
        if not i in refs and memory_map[i] == 1:
            release_slice(i)
        i = i + 1

#
# the compiler is pretty trivial.
# we take a string, break it into tokens, then lay down bytecode based on
# single character prefixes.
#
# #  Numbers
# $  Characters
# &  Pointers
# `  Bytecodes
# '  Strings
# "  Comments
#
# the bytecode forms are kept simple:
#
# type           stored         type
# ==========     ============================
# Functions      pointer        function call
# Strings        pointer        string
# Numbers        VALUE          number
# Characters     ASCII_VALUE    character
# Pointers       pointer        pointer
# Bytecodes      bytecode       bytecode
# Comments       pointer        comment
#
# for two functions ([ and ]), new quotes are started or closed. These are
# the only case where the corresponding action is run automatically rather
# than being compiled.
#
# bytecodes get wrapped into named functions. At this point they are not
# inlined. This hurts performance, but makes the implementation much simpler.
#

# The compile_ functions take a parameter, a slice, and the current offset
# in that slice. They lay down the appropriate byte codes for the type of
# item they are compiling. When done, they return the new offset.


def compile_string(string, slice, offset):
    store(string_to_slice(string), slice, offset, TYPE_STRING)
    offset += 1
    return offset


def compile_comment(string, slice, offset):
    store(string_to_slice(string), slice, offset, TYPE_REMARK)
    offset += 1
    return offset


def compile_character(character, slice, offset):
    store(character, slice, offset, TYPE_CHARACTER)
    offset += 1
    return offset


def compile_pointer(name, slice, offset):
    if is_number(name):
        store(float(name), slice, offset, TYPE_POINTER)
    else:
        if lookup_pointer(name) != -1:
            store(lookup_pointer(name), slice, offset, TYPE_POINTER)
        else:
            store(0, slice, offset, TYPE_POINTER)
            report('E03: Compile Error: Unable to map ' +
                   name + ' to a pointer')
    offset += 1
    return offset


def compile_number(number, slice, offset):
    if is_number(number):
        store(float(number), slice, offset, TYPE_NUMBER)
    else:
        store(float('nan'), slice, offset, TYPE_NUMBER)
        report("E03: Compile Error: Unable to convert " +
               number + " to a number")
    offset += 1
    return offset


def compile_bytecode(bytecode, slice, offset):
    store(float(bytecode), slice, offset, TYPE_BYTECODE)
    offset += 1
    return offset


def compile_function_call(name, slice, offset):
    if lookup_pointer(name) != -1:
        store(lookup_pointer(name), slice, offset, TYPE_FUNCTION_CALL)
        offset += 1
    else:
        report('E03: Compile Error: Unable to map ' + name + ' to a pointer')
    return offset


def parse_string(tokens, i, count, delimiter):
    s = ""
    a = tokens[i].endswith(delimiter)
    b = tokens[i] != delimiter
    c = tokens[i].endswith("\\" + delimiter)
    if a and b and not c:
        s = tokens[i]
    else:
        j = i + 1
        s = tokens[i]
        while j < count:
            s += " "
            s += tokens[j]
            a = tokens[j].endswith(delimiter)
            b = tokens[j].endswith("\\" + delimiter)
            if a and not b:
                i = j
                j = count
            j += 1
    return i, s.replace("\\", "")


def compile(str, slice):
    global should_abort
    should_abort = False
    nest = []
    tokens = ' '.join(str.split()).split(' ')
    count = len(tokens)
    i = 0
    offset = 0
    current = ""
    prefix = ""
    while i < count:
        current = tokens[i]
        prefix = tokens[i][:1]
        s = ""
        if prefix == '"':
            i, s = parse_string(tokens, i, count, '"')
            offset = compile_comment(s[1:-1], slice, offset)
        elif prefix == "'":
            i, s = parse_string(tokens, i, count, '\'')
            offset = compile_string(s[1:-1], slice, offset)
        elif prefix == "$":
            v = ord(current[1:][0].encode('utf-8'))
            offset = compile_character(v, slice, offset)
        elif prefix == "&":
            offset = compile_pointer(current[1:], slice, offset)
        elif prefix == "#":
            offset = compile_number(current[1:], slice, offset)
        elif prefix == "`":
            offset = compile_bytecode(current[1:], slice, offset)
        elif prefix == "@":
            offset = compile_pointer(current[1:], slice, offset)
            offset = compile_number(0, slice, offset)
            offset = compile_bytecode(BC_MEM_FETCH, slice, offset)
        elif prefix == "!":
            offset = compile_pointer(current[1:], slice, offset)
            offset = compile_number(0, slice, offset)
            offset = compile_bytecode(BC_MEM_STORE, slice, offset)
        elif current == "[":
            nest.append(slice)
            nest.append(offset)
            slice = request_slice()
            offset = 0
        elif current == "]":
            old = slice
            if offset == 0:
                store(BC_FLOW_RETURN, slice, offset, TYPE_BYTECODE)
            offset = nest.pop()
            slice = nest.pop()
            store(old, slice, offset, TYPE_POINTER)
            offset += 1
        else:
            if is_number(current):
                offset = compile_number(current, slice, offset)
            else:
                offset = compile_function_call(current, slice, offset)
        i += 1
        if offset == 0:
            store(BC_FLOW_RETURN, slice, offset, TYPE_BYTECODE)
    return slice


def parse_bootstrap(f):
    """compile the bootstrap package it into memory"""
    for line in condense_lines(f):
        if len(line) > 0:
            interpret(compile(line, request_slice()))


#
# some parts of the language (prefixes, brackets) are understood as part of
# the parser. but one important bit, the ability to give a name to an item,
# is not. this routine sets up an initial dictionary containing the *define*
# function. with this loaded, all else can be built.
#

def prepare_dictionary():
    """setup the initial dictionary"""
    s = request_slice()
    store(BC_QUOTE_NAME, s, 0, TYPE_BYTECODE)
    add_definition('define', s)


def pointer_to_name(ptr):
    """given a parable pointer, return the corresponding name, or"""
    """an empty string"""
    global dictionary_names, dictionary_slices
    s = ""
    if ptr in dictionary_slices:
        s = dictionary_names[dictionary_slices.index(ptr)]
    return s
bootstrap = []
bootstrap.append(""" "Name the byte codes" """)
bootstrap.append(""" [ "vt-v"   `100 ] 'set-type' define """)
bootstrap.append(""" [ "v-vn"   `101 ] 'type?' define """)
bootstrap.append(""" [ "nn-n"   `200 ] '+' define """)
bootstrap.append(""" [ "nn-n"   `201 ] '-' define """)
bootstrap.append(""" [ "nn-n"   `202 ] '*' define """)
bootstrap.append(""" [ "nn-n"   `203 ] '/' define """)
bootstrap.append(""" [ "nn-n"   `204 ] 'rem' define """)
bootstrap.append(""" [ "n-n"    `205 ] 'floor' define """)
bootstrap.append(""" [ "nn-n"   `206 ] '^' define """)
bootstrap.append(""" [ "n-n"    `207 ] 'log' define """)
bootstrap.append(""" [ "n-n"    `208 ] 'log10' define """)
bootstrap.append(""" [ "nn-n"   `209 ] 'log<n>' define """)
bootstrap.append(""" [ "nn-n"   `210 ] 'shift' define """)
bootstrap.append(""" [ "nn-n"   `211 ] 'and' define """)
bootstrap.append(""" [ "nn-n"   `212 ] 'or' define """)
bootstrap.append(""" [ "nn-n"   `213 ] 'xor' define """)
bootstrap.append(""" [ "-n"     `214 ] 'random' define """)
bootstrap.append(""" [ "n-n"    `215 ] 'sqrt' define """)
bootstrap.append(""" [ "n-n"    `216 ] 'round' define """)
bootstrap.append(""" [ "nn-f"   `220 ] 'lt?' define """)
bootstrap.append(""" [ "nn-f"   `221 ] 'gt?' define """)
bootstrap.append(""" [ "nn-f"   `222 ] 'lteq?' define """)
bootstrap.append(""" [ "nn-f"   `223 ] 'gteq?' define """)
bootstrap.append(""" [ "vv-f"   `224 ] 'eq?' define """)
bootstrap.append(""" [ "vv-f"   `225 ] '-eq?' define """)
bootstrap.append(""" [ "fpp-"   `300 ] 'if' define """)
bootstrap.append(""" [ "p-"     `301 ] 'while' define """)
bootstrap.append(""" [ "p-"     `302 ] 'until' define """)
bootstrap.append(""" [ "np-"    `303 ] 'times' define """)
bootstrap.append(""" [ "p-"     `305 ] 'invoke' define """)
bootstrap.append(""" [ "vp-v"   `306 ] 'dip' define """)
bootstrap.append(""" [ "vp-v"   `307 ] 'sip' define """)
bootstrap.append(""" [ "vpp-?"  `308 ] 'bi' define """)
bootstrap.append(""" [ "vppp-?" `309 ] 'tri' define """)
bootstrap.append(""" [ "-"      `398 ] 'abort' define """)
bootstrap.append(""" [ "pp-"    `400 ] 'copy' define """)
bootstrap.append(""" [ "pn-v"   `401 ] 'fetch' define """)
bootstrap.append(""" [ "vpn-"   `402 ] 'store' define """)
bootstrap.append(""" [ "-p"     `403 ] 'request' define """)
bootstrap.append(""" [ "p-"     `404 ] 'release' define """)
bootstrap.append(""" [ "-"      `405 ] 'collect-garbage' define """)
bootstrap.append(""" [ "p-n"    `406 ] 'get-last-index' define """)
bootstrap.append(""" [ "np-"    `407 ] 'set-last-index' define """)
bootstrap.append(""" [ "tpn-"   `408 ] 'set-stored-type' define """)
bootstrap.append(""" [ "pn-n"   `409 ] 'get-stored-type' define """)
bootstrap.append(""" [ "v-vv"   `500 ] 'dup' define """)
bootstrap.append(""" [ "v-"     `501 ] 'drop' define """)
bootstrap.append(""" [ "vV-Vv"  `502 ] 'swap' define """)
bootstrap.append(""" [ "-n"     `503 ] 'depth' define """)
bootstrap.append(""" [ "s-f"    `601 ] 'function-exists?' define """)
bootstrap.append(""" [ "s-p"    `602 ] 'lookup-function' define """)
bootstrap.append(""" [ "s-"     `603 ] 'hide-function' define """)
bootstrap.append(""" [ "p-s"    `604 ] 'lookup-name' define """)
bootstrap.append(""" [ "ss-n"   `700 ] 'find' define """)
bootstrap.append(""" [ "pnn-p"  `701 ] 'subslice' define """)
bootstrap.append(""" [ "s-f"    `702 ] 'numeric?' define """)
bootstrap.append(""" [ "p-p"    `703 ] 'reverse' define """)
bootstrap.append(""" [ "v-v"    `800 ] 'to-lowercase' define """)
bootstrap.append(""" [ "v-v"    `801 ] 'to-uppercase' define """)
bootstrap.append(""" [ "s-"     `900 ] 'report-error' define """)
bootstrap.append(""" [ "n-n"    `1000 ] 'sin' define """)
bootstrap.append(""" [ "n-n"    `1001 ] 'cos' define """)
bootstrap.append(""" [ "n-n"    `1002 ] 'tan' define """)
bootstrap.append(""" [ "n-n"    `1003 ] 'asin' define """)
bootstrap.append(""" [ "n-n"    `1004 ] 'acos' define """)
bootstrap.append(""" [ "n-n"    `1005 ] 'atan' define """)
bootstrap.append(""" [ "n-n"    `1006 ] 'atan2' define """)
bootstrap.append(""" [ "vV-vVv" [ dup ] dip swap ] 'over' define """)
bootstrap.append(""" [ "vV-VvV" [ swap ] sip ] 'tuck' define """)
bootstrap.append(""" [ "vV-V"   swap drop ] 'nip' define """)
bootstrap.append(""" [ "...-"   depth [ drop ] times ] 'reset' define """)
bootstrap.append(""" "Symbolic names for data types" """)
bootstrap.append(""" [ "-n"  100 ] 'NUMBER' define """)
bootstrap.append(""" [ "-n"  200 ] 'STRING' define """)
bootstrap.append(""" [ "-n"  300 ] 'CHARACTER' define """)
bootstrap.append(""" [ "-n"  400 ] 'POINTER' define """)
bootstrap.append(""" [ "-n"  500 ] 'FLAG' define """)
bootstrap.append(""" [ "-n"  600 ] 'BYTECODE' define """)
bootstrap.append(""" [ "-n"  700 ] 'REMARK' define """)
bootstrap.append(""" [ "-n"  800 ] 'FUNCALL' define """)
bootstrap.append(""" [ "v-b" BYTECODE  set-type ] ':b' define """)
bootstrap.append(""" [ "v-n" NUMBER    set-type ] ':n' define """)
bootstrap.append(""" [ "v-s" STRING    set-type ] ':s' define """)
bootstrap.append(""" [ "v-c" CHARACTER set-type ] ':c' define """)
bootstrap.append(""" [ "v-p" POINTER   set-type ] ':p' define """)
bootstrap.append(""" [ "v-f" FLAG      set-type ] ':f' define """)
bootstrap.append(""" [ "v-f" FUNCALL   set-type ] ':x' define """)
bootstrap.append(""" [ "v-c" REMARK    set-type ] ':r' define """)
bootstrap.append(""" [ "v-f" type? NUMBER    eq? ] 'number?' define """)
bootstrap.append(""" [ "v-f" type? STRING    eq? ] 'string?' define """)
bootstrap.append(""" [ "v-f" type? CHARACTER eq? ] 'character?' define """)
bootstrap.append(""" [ "v-f" type? POINTER   eq? ] 'pointer?' define """)
bootstrap.append(""" [ "v-f" type? FLAG      eq? ] 'flag?' define """)
bootstrap.append(""" [ "v-f" type? BYTECODE  eq? ] 'bytecode?' define """)
bootstrap.append(""" [ "v-f" type? REMARK    eq? ] 'remark?' define """)
bootstrap.append(""" [ "v-f" type? FUNCALL   eq? ] 'funcall?' define """)
bootstrap.append(""" "Stack Flow" """)
bootstrap.append(""" [ "vV-vVvV"  over over ] 'dup-pair' define """)
bootstrap.append(""" [ "vv-"      drop drop ] 'drop-pair' define """)
bootstrap.append(""" [ "?n-"      [ drop ] times ] 'drop-multiple' define """)
bootstrap.append(""" [ "q-...n"   depth [ invoke ] dip depth swap - ] 'invoke<depth?>' define """)
bootstrap.append(""" "Slice Functions" """)
bootstrap.append(""" [ "p-pn"  dup get-last-index ] 'last-index?' define """)
bootstrap.append(""" [ "p-pn"  last-index? 1 + ] 'slice-length?' define """)
bootstrap.append(""" [ "np-"   [ get-last-index + ] sip set-last-index ] 'adjust-slice-length' define """)
bootstrap.append(""" [ "p-p"   request [ copy ] sip ] 'duplicate-slice' define """)
bootstrap.append(""" [ "p-n"   get-last-index 1 + ] 'length?' define """)
bootstrap.append(""" "Simple variables are just named slices, with functions to access the first element. They're useful for holding single values." """)
bootstrap.append(""" [ "s-"   request swap define ] 'variable' define """)
bootstrap.append(""" [ "vs-"  [ request [ 0 store ] sip ] dip define ] 'variable!' define """)
bootstrap.append(""" [ "p-"   0 swap 0 store ] 'off' define """)
bootstrap.append(""" [ "p-"   -1 swap 0 store ] 'on' define """)
bootstrap.append(""" [ "p-"   [ 0 fetch 1 + ] sip 0 store ] 'increment' define """)
bootstrap.append(""" [ "p-"   [ 0 fetch 1 - ] sip 0 store ] 'decrement' define """)
bootstrap.append(""" [ "p-"   request swap copy ] 'zero-out' define """)
bootstrap.append(""" [ "pp-"  swap request dup-pair copy swap [ [ invoke ] dip ] dip copy ] 'preserve' define """)
bootstrap.append(""" "Number functions" """)
bootstrap.append(""" [ "nn-n"  over over lt? [ nip ] [ drop ] if ] 'max' define """)
bootstrap.append(""" [ "nn-n"  over over gt? [ nip ] [ drop ] if ] 'min' define """)
bootstrap.append(""" [ "n-n"  dup -1 * max ] 'abs' define """)
bootstrap.append(""" "The basic bi/tri combinators provided as part of the primitives allow application of multiple quotes to a single data element. Here we add new forms that are very useful." """)
bootstrap.append(""" "We consider the bi/tri variants to consist of one of three types." """)
bootstrap.append(""" "Cleave combinators (bi, tri) apply multiple quotations to a single value (or set of values)." """)
bootstrap.append(""" "Spread combinators (bi*, tri*) apply multiple quotations to multiple values." """)
bootstrap.append(""" [ "vvpp-?"   [ dip ] dip invoke ] 'bi*' define """)
bootstrap.append(""" [ "vvvppp-?" [ [ swap [ dip ] dip ] dip dip ] dip invoke ] 'tri*' define """)
bootstrap.append(""" "Apply combinators (bi@, tri@) apply a single quotation to multiple values." """)
bootstrap.append(""" [ "vvp-?"    dup bi* ] 'bi@' define """)
bootstrap.append(""" [ "vvvp-?"   dup dup tri* ] 'tri@' define """)
bootstrap.append(""" "Expand the basic conditionals into a more useful set." """)
bootstrap.append(""" [ "s-"   report-error abort ] 'abort<with-error>' define """)
bootstrap.append(""" [ "-f"   -1 :f ] 'true' define """)
bootstrap.append(""" [ "-f"   0  :f ] 'false' define """)
bootstrap.append(""" [ "f-f"  :f :n -1 xor :f ] 'not' define """)
bootstrap.append(""" [ "fp-"  [ ] if ] 'if-true' define """)
bootstrap.append(""" [ "fp-"  [ ] swap if ] 'if-false' define """)
bootstrap.append(""" [ "v-f"  :s 'nan' eq? ] 'nan?' define """)
bootstrap.append(""" [ "v-f"  0 eq? ] 'zero?' define """)
bootstrap.append(""" [ "v-f"  :f :n zero? not ] 'true?' define """)
bootstrap.append(""" [ "v-f"  :f :n zero? ] 'false?' define """)
bootstrap.append(""" [ "n-f"  2 rem zero? ] 'even?' define """)
bootstrap.append(""" [ "n-f"  2 rem zero? not ] 'odd?' define """)
bootstrap.append(""" [ "n-f"  0 lt? ] 'negative?' define """)
bootstrap.append(""" [ "n-f"  0 gteq? ] 'positive?' define """)
bootstrap.append(""" [ "nnn-f"  [ [ :n ] bi@ ] dip :n dup-pair gt? [ swap ] if-true [ over ] dip lteq? [ gteq? ] dip and :f ] 'between?' define """)
bootstrap.append(""" [ "vv-vvf"  [ type? ] dip type? swap [ eq? ] dip swap ] 'types-match?' define """)
bootstrap.append(""" "numeric ranges" """)
bootstrap.append(""" [ "nn-..."  dup-pair lt? [ [ [ dup 1 + ] dip dup-pair eq? ] until ] [ [ [ dup 1 - ] dip dup-pair eq? ] until ] if drop ] 'expand-range' define """)
bootstrap.append(""" [ "...n-n"  1 - [ + ] times ] 'sum-range' define """)
bootstrap.append(""" "Misc" """)
bootstrap.append(""" [ "p-"   invoke<depth?> [ hide-function ] times ] 'hide-functions' define """)
bootstrap.append(""" [ "ss-"  swap dup function-exists? [ dup lookup-function swap hide-function swap define ] [ drop ] if ] 'rename-function' define """)
bootstrap.append(""" [ "ps-"  dup hide-function define ] 'redefine' define """)
bootstrap.append(""" [ "p-"   invoke<depth?> [ variable ] times ] 'variables' define """)
bootstrap.append(""" "String and Character" """)
bootstrap.append(""" "Note that this is only supporting the basic ASCII character set presently." """)
bootstrap.append(""" [ "vs-f" swap :s find not true? ] 'string-contains?' define """)
bootstrap.append(""" [ "v-f"  :c $0 $9 between? ] 'digit?' define """)
bootstrap.append(""" [ "v-f"  '`~!@#$%^&*()'"<>,.:;[]{}\|-_=+'                    string-contains? ] 'symbol?' define """)
bootstrap.append(""" [ "v-f"  to-lowercase 'abcdefghijklmnopqrstuvwxyz'           string-contains? ] 'letter?' define """)
bootstrap.append(""" [ "v-f"  to-lowercase 'abcdefghijklmnopqrstuvwxyz1234567890' string-contains? ] 'alphanumeric?' define """)
bootstrap.append(""" [ "v-f"  to-lowercase 'bcdfghjklmnpqrstvwxyz'                string-contains? ] 'consonant?' define """)
bootstrap.append(""" [ "v-f"  to-lowercase 'aeiou'                                string-contains? ] 'vowel?' define """)
bootstrap.append(""" [ "v-f"  dup to-lowercase eq? ] 'lowercase?' define """)
bootstrap.append(""" [ "v-f"  dup to-uppercase eq? ] 'uppercase?' define """)
bootstrap.append(""" [ "p-s"  invoke<depth?> 1 - [ [ :s ] bi@ + ] times ] 'build-string' define """)
bootstrap.append(""" "Functions for trimming leading and trailing whitespace off of a string. The left side trim is iterative; the right side trim is recursive." """)
bootstrap.append(""" [ "s-s"  :s #0 [ dup-pair fetch :n 32 eq? [ 1 + ] dip ] while 1 - [ last-index? ] dip swap subslice :s ] 'trim-left' define """)
bootstrap.append(""" [ ] 'trim-right' define """)
bootstrap.append(""" [ "s-s"  :s last-index? dup-pair 1 - fetch :n nip 32 eq? [ last-index? 1 - 0 swap subslice :s trim-right ] if-true ] 'trim-right' define """)
bootstrap.append(""" [ "s-s"  trim-left trim-right ] 'trim' define """)
bootstrap.append(""" "Slice as a linear buffer" """)
bootstrap.append(""" [ 'CurrentBuffer'  'BufferOffset' ] variables """)
bootstrap.append(""" [ "-pn"    @CurrentBuffer @BufferOffset ] 'buffer-position' define """)
bootstrap.append(""" [ "-"      &BufferOffset increment ] 'buffer-advance' define """)
bootstrap.append(""" [ "-"      &BufferOffset decrement ] 'buffer-retreat' define """)
bootstrap.append(""" [ "n-"     buffer-position store ] 'buffer-store-current' define """)
bootstrap.append(""" [ "-n"     buffer-position fetch ] 'buffer-fetch-current' define """)
bootstrap.append(""" [ "v-"     buffer-position store buffer-advance ] 'buffer-store' define """)
bootstrap.append(""" [ "-n"     buffer-position fetch buffer-advance ] 'buffer-fetch' define """)
bootstrap.append(""" [ "v-"     buffer-retreat buffer-position store ] 'buffer-store-retreat' define """)
bootstrap.append(""" [ "-n"     buffer-retreat buffer-position fetch ] 'buffer-fetch-retreat' define """)
bootstrap.append(""" [ "p-"     !CurrentBuffer 0 !BufferOffset ] 'set-buffer' define """)
bootstrap.append(""" [ "...n-"  [ buffer-store ] times ] 'buffer-store-items' define """)
bootstrap.append(""" [ "-"      request set-buffer ] 'new-buffer' define """)
bootstrap.append(""" [ "p-"     @CurrentBuffer [ @BufferOffset [ invoke ] dip !BufferOffset ] dip !CurrentBuffer ] 'preserve-buffer' define """)
bootstrap.append(""" [ "s-"     request [ swap define ] sip set-buffer ] 'named-buffer' define """)
bootstrap.append(""" "Programatic Creation of Quotes" """)
bootstrap.append(""" [ "vv-p"  swap request [ 0 store ] sip [ 1 store ] sip ] 'cons' define """)
bootstrap.append(""" [ "vp-p"  :x cons ] 'curry' define """)
bootstrap.append(""" "Arrays and Operations on Quotations" """)
bootstrap.append(""" [ "q-v"  0 fetch ] 'first' define """)
bootstrap.append(""" [ "q-q"  1 over length? subslice ] 'rest' define """)
bootstrap.append(""" [ "p-v"  slice-length? 1 - fetch ] 'last' define """)
bootstrap.append(""" [ 'Found'  'Value'  'XT'  'Source'  'Target'  'Offset' ] variables """)
bootstrap.append(""" [ "q-"   @Found [ @Value [ @XT [ @Source [ @Target [ @Offset [ invoke ] dip !Offset ] dip !Target ] dip !Source ] dip !XT ] dip !Value ] dip !Found ] 'localize' define """)
bootstrap.append(""" [ "vp-"    :p dup length? store ] 'push' define """)
bootstrap.append(""" [ "p-v"    :p [ dup get-last-index fetch ] sip dup length? 2 - swap set-last-index ] 'pop' define """)
bootstrap.append(""" [ "-p"     request [ pop drop ] sip ] 'request-empty' define """)
bootstrap.append(""" [ "pnp-n"  [ !XT over length? [ over pop @XT invoke ] times nip ] localize ] 'reduce' define """)
bootstrap.append(""" [ "pp-?"   [ !XT !Source 0 !Offset @Source length? [ @Source @Offset fetch @XT invoke @Offset 1 + !Offset ] times ] localize ] 'for-each' define """)
bootstrap.append(""" [ "pv-f"   false !Found !Value dup length? 0 swap [ dup-pair fetch @Value types-match? [ eq? @Found or :f !Found ] [ drop-pair ] if 1 + ] times drop-pair @Found ] 'contains?' define """)
bootstrap.append(""" [ "pq-p"   [ !XT !Source request-empty !Target 0 !Offset @Source length? [ @Source @Offset fetch @XT invoke [ @Source @Offset fetch @Target push ] if-true @Offset 1 + !Offset ] times @Target ] localize ] 'filter' define """)
bootstrap.append(""" [ "pq-"    [ !XT duplicate-slice !Source 0 !Offset @Source length? [ @Source @Offset fetch @XT invoke @Source @Offset store @Offset 1 + !Offset ] times @Source ] localize ] 'map' define """)
bootstrap.append(""" [ "p-p"    [ request !Target invoke<depth?> 0 max [ @Target push ] times @Target 1 over length? subslice :p ] localize ] 'capture-results' define """)
bootstrap.append(""" [ "pv-n"   [ !Target !Source 0 !Offset -1 !Found @Source length? [ @Source @Offset fetch @Target eq? [ @Offset !Found ] if-true @Offset 1 + !Offset ] times @Found ] localize ] 'index-of' define """)
bootstrap.append(""" [ 'Found'  'Value'  'XT'  'Source'  'Target'  'Offset'  'localize' ] hide-functions """)
bootstrap.append(""" "Text Output Buffer" """)
bootstrap.append(""" 'TOB' variable """)
bootstrap.append(""" [ "v-"   &TOB push ] '.' define """)
bootstrap.append(""" [ "-..." &TOB get-last-index [ &TOB pop ] times ] 'show-tob' define """)
bootstrap.append(""" [ "-"    0 &TOB set-last-index ] 'clear-tob' define """)
bootstrap.append(""" "Scope" """)
bootstrap.append(""" 'Internals' variable """)
bootstrap.append(""" [ "q-" !Internals   @Internals duplicate-slice [ variable ] for-each ] '{' define """)
bootstrap.append(""" [ "-"  @Internals hide-functions ] '}' define """)
bootstrap.append(""" [ 'Prior' 'List' ] { """)
bootstrap.append(""" [ "qq-" @Prior [ @List [ swap duplicate-slice !List [ @List [ first ] for-each ] capture-results reverse !Prior invoke @Prior length? [ @Prior pop @List pop 0 store ] times ] dip !List ] dip !Prior   ] 'invoke<preserving>' define """)
bootstrap.append(""" } """)
bootstrap.append(""" [ 'A'  'B'  'X'  'C' ] { """)
bootstrap.append(""" [ "ppp-p" [ A B X C ] [ !X !B !A request-empty !C @A length? [ @A first @B first @X invoke @C push @A rest !A @B rest !B ] times @C duplicate-slice ] invoke<preserving>   ] 'zip' define """)
bootstrap.append(""" } """)
bootstrap.append(""" "Hashing functions" """)
bootstrap.append(""" [ 'hash:sdbm<n>' ] { """)
bootstrap.append(""" 389 'Hash-Prime' variable! """)
bootstrap.append(""" [ "s-n" 0 swap [ :n xor ] for-each ] 'hash:xor' define """)
bootstrap.append(""" [ "s-n" 5381 swap [ over -5 shift + + ] for-each ] 'hash:djb2' define """)
bootstrap.append(""" [ :n over -6 shift + over -16 shift + swap - ] 'hash:sdbm<n>' define """)
bootstrap.append(""" [ "s-n" 0 swap [ :c swap hash:sdbm<n> ] for-each ] 'hash:sdbm' define """)
bootstrap.append(""" [ "s-b" hash:djb2 ] 'chosen-hash' define """)
bootstrap.append(""" [ "s-n" chosen-hash @Hash-Prime rem ] 'hash' define """)
bootstrap.append(""" } """)
bootstrap.append(""" [ 'Offset'  'Tests'  'Done' ] { """)
bootstrap.append(""" [ "q-" [ Offset Tests Done ] [ !Tests false !Done 0 !Offset [ @Tests @Offset fetch first invoke [ true !Done @Tests @Offset fetch 1 fetch invoke ] if-true @Offset 1 + !Offset @Done ] until ] invoke<preserving>   ] 'when' define """)
bootstrap.append(""" } """)
bootstrap.append(""" [ 'Source'  'Value'  'Target'  'extract'  'next-piece' ] { """)
bootstrap.append(""" [ "n-"  [ @Source 0 ] dip subslice :s ] 'extract' define """)
bootstrap.append(""" [ "n-"  @Source swap @Value length? + over length? subslice :s !Source ] 'next-piece' define """)
bootstrap.append(""" [ "ss-p" slice-length? 0 eq? [ drop [ :s ] map ] [ :s !Value !Source request-empty !Target [ @Source @Value find dup -1 -eq? [ [ extract @Target push ] sip next-piece true ] [ drop @Source @Target push false ] if ] while @Target ] if   ] 'split' define """)
bootstrap.append(""" [ "pv-s" :s !Value reverse '' [ :s + @Value + ] reduce "This leaves the join value appended to the string. Remove it." 0 over length? @Value length? - subslice :s   ] 'join' define """)
bootstrap.append(""" } """)
bootstrap.append(""" [ "s-s"  [ :n 32 128 between? ] filter :s ] 'clean-string' define """)
bootstrap.append(""" [ "sss-s"  [ split ] dip join clean-string ] 'replace' define """)
bootstrap.append(""" [ 'Data'  'Source'  'String'  '(accumulate)'  '(next)' ] { """)
bootstrap.append(""" [ "-"  @String @Source first @Data first type? POINTER eq? [ invoke ] if-true :s + + !String ] '(accumulate)' define """)
bootstrap.append(""" [ "-"  @Source rest !Source  @Data rest !Data ] '(next)' define """)
bootstrap.append(""" [ "ps-s" [ Data Source String ] [ '{v}' split !Source !Data request-empty :s !String @Data length? [ (accumulate) (next) ] times "Merge any remaining items" @String @Source '' join + clean-string ] invoke<preserving>   ] 'interpolate' define """)
bootstrap.append(""" } """)
bootstrap.append(""" [ 'D'  'S'  'L' ] { """)
bootstrap.append(""" [ "qs-s" [ S D L ] [ !S  !D @S '{v}' split length? !L [ @D length? @L lt? dup [ @D duplicate-slice @D + !D ] if-true ] while [ @D length? @L lt? dup [ @D pop drop ] if-false ] until @D @S interpolate ] invoke<preserving>   ] 'interpolate<cycling>' define """)
bootstrap.append(""" } """)
bootstrap.append(""" "apropos" """)
bootstrap.append(""" [ "s-s | s-ss" dup function-exists? [ lookup-function [ first ] [ last ] bi [ remark? [ drop ] if-false ] bi@ ] [ 'apropos: function "' swap + '" not found' + report-error ] if ] 'apropos' define """)
bootstrap.append(""" "unsorted" """)
bootstrap.append(""" [ 'S' ] { """)
bootstrap.append(""" [ "-p" request-empty !S depth [ @S push ] times @S reverse dup !S invoke @S   ] 'stack-values' define """)
bootstrap.append(""" } """)
import sys, os
from os.path import expanduser

def display_stack(verbose):
    global stack, types
    i = 0
    while i < len(stack):
        if i == len(stack) - 1:
            sys.stdout.write("TOS\t" + str(i))
        else:
            sys.stdout.write("\t" + str(i))

        if types[i] == TYPE_NUMBER:
            sys.stdout.write("\t#" + str(stack[i]))
        elif types[i] == TYPE_CHARACTER:
            sys.stdout.write("\t$" + str(chr(stack[i])))
        elif types[i] == TYPE_STRING:
            sys.stdout.write(("\t'" + slice_to_string(stack[i]) + "'"))
            if verbose == True:
                sys.stdout.write("\n\t\tstored at: " + str(stack[i]))
        elif types[i] == TYPE_POINTER:
            sys.stdout.write("\t&" + str(stack[i]))
            if verbose == True:
                if pointer_to_name(stack[i]) != "":
                    sys.stdout.write("\n\t\tpointer to: " + pointer_to_name(stack[i]))
        elif types[i] == TYPE_FLAG:
            if stack[i] == -1:
                sys.stdout.write("\ttrue")
            elif stack[i] == 0:
                sys.stdout.write("\tfalse")
            else:
                sys.stdout.write("\tmalformed flag")
        elif types[i] == TYPE_BYTECODE:
            sys.stdout.write("\t`" + str(stack[i]))
        elif types[i] == TYPE_REMARK:
            sys.stdout.write(("\t\"" + slice_to_string(stack[i]) + "\""))
            if verbose == True:
                sys.stdout.write("\n\t\tstored at: " + str(stack[i]))
        elif types[i] == TYPE_FUNCTION_CALL:
            sys.stdout.write("\tCALL: " + str(stack[i]))
        else:
            sys.stdout.write("\tunmatched type on stack!")
            if verbose == True:
                sys.stdout.write("\n\tRaw value: " + str(stack[i]))
                sys.stdout.write("\n\tType code: " + str(types[i]))
        sys.stdout.write("\n")
        i += 1


def display_errors():
    for e in errors:
        sys.stdout.write("\n" + e)
    sys.stdout.write("\n")


def display(verbose):
    display_stack(verbose)
    display_errors()
    clear_errors()


def load_file(file):
    if not os.path.exists(file):
        report('P00: File not found: ' + file)
    else:
        f = condense_lines(open(file).readlines())
        for line in f:
            if len(line) > 0:
                if not line.startswith("#!"):
                    s = compile(line, request_slice())
                    try:
                        interpret(s)
                    except:
                        pass


if __name__ == '__main__':
    prepare_slices()
    prepare_dictionary()
    parse_bootstrap(bootstrap)

    try:
        home = expanduser("~")
        src = home + "/.parable/on_startup.p"
        parse_bootstrap(open(src).readlines())
    except:
        pass

    verbose = False

    if len(sys.argv) < 2:
        if os.path.exists('source.p'):
            load_file('source.p')
        else:
            sys.exit('Usage: %s filename(s)' % sys.argv[0])
    else:
        for source in sys.argv:
            if not os.path.exists(source) and source != "-v":
                sys.exit('ERROR: source file "%s" was not found!' % source)
            if source != sys.argv[0]:
                if source == "-v":
                    verbose = True
                else:
                    load_file(source)

    display(verbose)
    sys.stdout.flush()
