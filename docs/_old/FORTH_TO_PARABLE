# Forth to Parable

This is a short overview intending to highlight some of the differences
between Parable and Forth. It is not an exhaustive comparsion.

## simple name changes

        Forth      Parable
        ---------------------
        2dup       dup-pair
        2drop      drop-pair
        0=         zero?
        execute    invoke

## stack flow

        Forth               Parable
        --------------------------------------------
        >r ... r>           [ ... ] dip
        >r ... r@ ... r>    [ [ ... ] sip ... ] sip
        dup >r ... r>       [ ... ] sip

One other form is that of saving and restoring a variable. In a Forth,
something like this is done:

        variable @ >r ... r> variable !

In Parable, the equivilent would use the **preserve** combinator:

        &variable [ ... ] preserve

Parable does *not* provide access to an address/return stack.

## defining functions

**forth**:

        : foo ... ;

**parable**:

        [ ... ] 'foo' define

## conditionals

**forth**:

        <flag> if ...true... else ...false... then
        <flag> if ...true... then

**parable**:

        <flag> [ ...true... ]  [ ...false... ]  if
        <flag> [ ... ] if-true
        <flag> [ ... ] if-false

## variables

        Forth             Parable
        --------------------------------
        variable foo      'foo' variable

## constants

        Forth             Parable
        -----------------------------------
        5 constant five   [ #5 ] '5' define

## recursion

**forth**:

        : factorial dup 1 > if dup 1 - recurse * else drop 1 then ;

**parable**:

        [ ] 'factorial' define
        [ dup #1 > [ dup #1 - factorial * ] [ drop 1 ] if ] 'factorial' define

